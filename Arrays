1.Largest Element
   class Solution {
    public static int largest(int[] arr) {
        // code here
        int largest=arr[0];
        for(int i=1;i<=arr.length-1;i++){
            if(arr[i]>largest){
                largest=arr[i];
            }
        }
        return largest;
    }
}
//Time Complexity: O(n)

2.Second largest 
 class Solution {
    public int getSecondLargest(int[] arr) {
        int largest=arr[0];
        int slargest=-1;
        for(int i=1;i<=arr.length-1;i++){
            if(arr[i]>largest){
                slargest=largest;
                largest=arr[i];
            }else if(arr[i]!=largest && arr[i]>slargest){
                slargest=arr[i];
            }
        }
        return slargest;
    }
}
//Time Complexity :O(n)

3.Two Sum
public class TwoSum {
    public static void main(String[] args) {
        int[] arr={2,6,5,8,11};
        Map<Integer,Integer> mp=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            mp.put(arr[i],i);
        }
        int target=13;
        System.out.println(Arrays.toString(twoSum(arr, mp, target)));

    }

    private static int[] twoSum(int[] arr, Map<Integer, Integer> mp, int target) {
        for(int i=0;i<arr.length;i++){
            int a=arr[i];
            int more=target-a;
            if(mp.containsKey(more)){
                return new int[]{i,mp.get(more)};
            }
        }
        return new int[]{-1,-1};
    }
}
Time complexity:O(nlogn)

4.Sort 0's 1's & 2's
 public class ZeroOneTwoSort {
    public static void main(String[] args) {
        int[] arr={0,1,1,0,2,1,0,0,2,1,2};
        int low=0;
        int mid=0;
        int high=arr.length-1;
        while(mid<=high){
            if(arr[mid]==0){
                swap(low,mid,arr);
                mid++;
                low++;
            }else if(arr[mid]==1){
                mid++;
            }else{
                swap(mid,high,arr);
                high--;
            }
        }
        for(int i:arr){
            System.out.println(i);
        }
    }
    public static void swap(int a,int b,int[] arr){
        int temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
